syntax = "proto3";

package vikraft;

// Raft consensus service definition
service RaftService {
  // Vote RPC - Used during leader election
  rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {}
  
  // AppendEntries RPC - Used for log replication and heartbeat
  rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {}
}

// RequestVote RPC arguments
message RequestVoteRequest {
  uint64 term = 1;          // candidate's term
  uint64 candidate_id = 2;   // candidate requesting vote
  uint64 last_log_index = 3; // index of candidate's last log entry
  uint64 last_log_term = 4;  // term of candidate's last log entry
}

// RequestVote RPC response
message RequestVoteResponse {
  uint64 term = 1;        // current term, for candidate to update itself
  bool vote_granted = 2;  // true means candidate received vote
}

// AppendEntries RPC arguments
message AppendEntriesRequest {
  uint64 term = 1;          // leader's term
  uint64 leader_id = 2;     // so followers can redirect clients
  uint64 prev_log_index = 3; // index of log entry immediately preceding new ones
  uint64 prev_log_term = 4;  // term of prev_log_index entry
  repeated LogEntry entries = 5; // log entries to store (empty for heartbeat)
  uint64 leader_commit = 6;  // leader's commit index
}

// AppendEntries RPC response
message AppendEntriesResponse {
  uint64 term = 1;    // current term, for leader to update itself
  bool success = 2;   // true if follower contained entry matching prev_log_index and prev_log_term
}

// Log entry message
message LogEntry {
  uint64 term = 1;    // term when entry was received by leader
  bytes data = 2;     // command for state machine
} 